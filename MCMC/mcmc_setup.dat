

#NOTE: currently only supports differential_evolution and metropolis_hastings
algorithm         : metropolis_hastings
#algorithm         : differential_evolution

chains            : 8

generations       : 100       #NOTE: excluding burnin

burnin            : 10

discard_timesteps : 365       #NOTE: Skip these many of the first timesteps when doing objective evaluations

de_b              : 0.1       #NOTE: each step each parameter can be perturbed [-de_b, de_b] (uniformly distributed) in the parameter space. Specific to differential evolution.

#TODO: add these:
#de_jump
#de_jump_gamma



objective :
#"Reach flow" {"Tarland1"}      #sim
#"observed Q"  {}               #obs

"Reach flow" {"Tveitvatn"}      #sim
"Discharge"  {"Tveitvatn"}      #obs

parameter_calibration :

# Format:
#           "name" {"index1" "index2" ..etc..}
#           min max   initial_guess
# OR
#           link {
#                "name1" {"index1" "index2" ..etc.. }
#                "name2" {"index3" "index4" ..etc.. }
#                ..etc..
#           } min max  initial_guess


"a" {"Tveitvatn"}
0.01 0.5 0.06

"b" {"Tveitvatn"}
0.3 0.8 0.7

link {
	"Time constant" {"Soil water" "Forest Productive"}
	"Time constant" {"Soil water" "Forest Unproductive"}
	"Time constant" {"Soil water" "Peat"}
	"Time constant" {"Soil water" "Open mountainous landscape"}
	"Time constant" {"Soil water" "Arable"}
} 3 15 6


#"Baseflow index" {"Tarland1"}
#0.1 1.0 0.7

#"Gradient of stream velocity-discharge relationship" {"Tarland1"}
#0.1 0.9 0.5

#"Exponent of stream velocity-discharge relationship"
#0.3 0.8 0.42

#link {
#	"Field capacity" {"Forest" "Upper box"}
#	"Field capacity" {"Peatland" "Upper box"}
#} 100 300   150



